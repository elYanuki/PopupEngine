class PopupEngine{
	static popup = document.createElement("div")
	static popupContent = document.createElement("div")
	static popupText = document.createElement("p")
	static popupButtons = document.createElement("div")

	static init(){
		this.popup.classList.add("popupEngineContainer")
		this.popup.style.cssText = `
			position: absolute;
			inset: 0;
			background-color: rgba(0, 0, 0, 0.5);
			z-index: 1000;
			transition: all .5s;
			display: none;
			place-content: center;
			border-radius: .5rem;`

		this.popupContent.classList.add("popupEngineBody")
		this.popupContent.style.cssText = `
			background-color: hsl(0, 0%, 100%);
			padding: 2vw;`

		this.popupText.style.cssText = `
			text-align: center;
			margin-bottom: 1rem;
			cursor: pointer;`

		this.popupButtons.style.cssText = `
			display: flex;
			gap: 1rem;
			justify-content: center;`

		this.popupContent.appendChild(this.popupText)
		this.popupContent.appendChild(this.popupButtons)
		this.popup.appendChild(this.popupContent)

		if (document.readyState === 'complete') {
			document.body.appendChild(document.createComment('Code generated by popupEngine'))
			document.body.appendChild(this.popup)
		} 
		else {
			window.addEventListener('load', ()=>{
				document.body.appendChild(document.createComment('Code generated by popupEngine'))
				document.body.appendChild(this.popup)
			});
		}
	}

	/**
	 * 
	 * @param {String} text text that wil be displayed to the user
	 * @param {function} confirm anonymous function that will be executed if the user confirms
	 * @param {function} cancel anonymous function that will be executed if the user cancels
	 */
	static createPopup(text, confirm, cancel) {
		this.popupButtons.innerHTML = ""

		let button1 = document.createElement("p")
		button1.innerHTML = "confirm"
		button1.onclick = function () { PopupEngine.closePopup(confirm) }
		button1.classList.add("popupEngineButton")

		let button2 = document.createElement("p")
		button2.innerHTML = "cancel"
		button2.onclick = function () { PopupEngine.closePopup(cancel) }
		button2.classList.add("popupEngineButton")

		this.popupButtons.appendChild(button1)
		this.popupButtons.appendChild(button2)
		this.popupText.innerHTML = text
		this.popup.style.display = "grid"
	}

	static closePopup(closeAction) {
		console.log(closeAction);

		if (closeAction)
			closeAction()

		this.popup.style.display = "none"
	}

	/**
	 * test method, creates one popup and outputs
	 */
	static test(){
		if(!document.querySelector('.popupEngineContainer')){
			console.error("Could not find DOM elements needed to run PopupEngine. This is probably because the Engine has not yet been initialized using PopupEngine.init()")
			return
		}
		if(!document.querySelector('.popupEngineBody') || !document.querySelector('.popupEngineBody div') || !document.querySelector('.popupEngineBody p')){
			console.error("Could not find DOM elements needed to run PopupEngine. This might be a problem with the initialization but is probably because another script has changed the engines elements or because your version of the engine is faulty.")
			return
		}
		console.log("all DOOM elements seem fine");
		console.log("generating popup from following code");
		console.log("createPopup('popup test', ()=>{console.log('confirm clicked')}, ()=> {console.log('cancel clicked')})");
		this.createPopup("popup test", ()=>{console.log("confirm clicked")}, ()=> {console.log("cancel clicked")})
	}
}